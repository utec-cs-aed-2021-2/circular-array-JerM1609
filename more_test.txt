
#include "queue.h"
void test_3_queue()
{
    int i;

    cout << "\n\t\tTEST QUEUE\n";
    QueueArray<int>* cola = new QueueArray<int>();   
    i = 20;
    while(i--)
    {
        cola->enqueue(i);
        cola->display();
    }
    while(!cola->is_empty())
    {
        cola->dequeue();
        cola->display();
    }
    
    return;
}

int main()
{
    cout << "\n\tTEST 3\n";
    test_3_queue();
}

#include "stack.h"
void test_4_stack()
{
    int letter = 64;
    cout << "\n\t\tTEST STACK\n";
    auto pila = new StackArray<char>();

    while (letter++ <= 75)
    {
        pila->push(char(letter));
        pila->display();
    }
    
    while (!pila->is_empty())
    {
        pila->pop();
        pila->display();
    }
}

int main()
{
    cout << "\n\tTEST 4\n";
    test_4_stack();
}


#include "circulararray.h"
#include "tester.h"

void test_1()
{
    CircularArray<int>* array = new CircularArray<int>(7);
    ASSERT(array->is_empty() == true, "The function is_empty is not working");
    array->push_back(6);
    array->push_back(3);
    array->push_back(7);
    array->push_back(8);
    array->push_back(1);
    ASSERT(array->is_empty() == false, "The function is_empty is not working");
    ASSERT(array->is_full() == false, "The function is_full is not working");
    array->pop_front();
    array->pop_back();
    array->push_front(10);
    array->push_front(2);
    array->push_front(15);
    array->push_front(4);
    ASSERT(array->to_string() == "4 15 2 10 3 7 8 ", "The function push_front is not working");
    ASSERT(array->is_full() == true, "The function is_full is not working");
    ASSERT(array->is_sorted() == false, "The function is_sorted is not working");
    array->sort();
    ASSERT(array->to_string() == "2 3 4 7 8 10 15 ", "The function sort is not working");
    array->reverse();
    ASSERT(array->to_string() == "15 10 8 7 4 3 2 ", "The function reverse is not working");   
    delete array;
}

void test_2()
{
    CircularArray<long long>* carray = new CircularArray <long long>(1);
    string showArray;
    int cnt = 1;
    while (cnt <= 3)
    {
        for (long long i = 0; i <= 10*cnt; i++)
        {
            if (i & 1)  // "i" is odd
                carray->push_back(i);
            else
                carray->push_front(i);
            cout << carray->to_string() << '\n';
        }
        
        cout << "carray: " << carray->to_string() << '\n';
        carray->reverse();
        cout << "carray: " << carray->to_string() << '\n';
        carray->sort();
        cout << "carray: " << carray->to_string() << '\n';
        carray->reverse();
        cout << "carray: " << carray->to_string() << '\n';
        
        int j = 0;
        while(!carray->is_empty()){
            if (j&1)
                carray->pop_front();
            else
                carray->pop_back(); 
            cout << carray->to_string() << '\n';
            j++;
        }
        cout << "carray: " << carray->to_string() << '\n';
        carray->clear();
        cnt++;
    }
    
    return;
}

void test_5()
{
    auto carray = new CircularArray<long long>(7);
    carray->push_back(25);
    cout << carray->to_string() << endl;
    carray->push_front(5);
    cout << carray->to_string() << endl;
    carray->insert(125, 2);

    for (long long i = 2; i <= 10; i++)
    {
        cout << carray->to_string() << '\n';
        if (i & 1)  // "i" is odd
            carray->push_back(i*5);
        else
            carray->push_front(i*5);
    }
    cout << carray->to_string() << " (size: "<< carray->size() << " )\n";
    
    carray->insert(150, 3);
    cout << carray->to_string() << " (size: "<< carray->size() << " )\n";

    carray->insert(100, 6);
    cout << carray->to_string() << " (size: "<< carray->size() << " )\n";

    carray->insert(270, 0);
    cout << carray->to_string() << " (size: "<< carray->size() << " )\n";

    carray->insert(380, 15);
    cout << carray->to_string() << " (size: "<< carray->size() << " )\n";

    carray->insert(222, 10);
    cout << carray->to_string() << endl;
    cout << "\n\n\n";
}


int main()
{
    cout << "\n\tTEST 1\n";
    test_1();
    cout << "\n\tTEST 2\n";
    test_2();
    cout << "\n\tTEST 5\n";
    test_5();
}
